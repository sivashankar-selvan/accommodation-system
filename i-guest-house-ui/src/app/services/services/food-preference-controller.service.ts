/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createFoodPreference } from '../fn/food-preference-controller/create-food-preference';
import { CreateFoodPreference$Params } from '../fn/food-preference-controller/create-food-preference';
import { FoodPreferenceDto } from '../models/food-preference-dto';
import { getAllFoodPreference } from '../fn/food-preference-controller/get-all-food-preference';
import { GetAllFoodPreference$Params } from '../fn/food-preference-controller/get-all-food-preference';

@Injectable({ providedIn: 'root' })
export class FoodPreferenceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllFoodPreference()` */
  static readonly GetAllFoodPreferencePath = '/food/preference';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllFoodPreference()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFoodPreference$Response(params?: GetAllFoodPreference$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FoodPreferenceDto>>> {
    return getAllFoodPreference(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllFoodPreference$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFoodPreference(params?: GetAllFoodPreference$Params, context?: HttpContext): Observable<Array<FoodPreferenceDto>> {
    return this.getAllFoodPreference$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FoodPreferenceDto>>): Array<FoodPreferenceDto> => r.body)
    );
  }

  /** Path part for operation `createFoodPreference()` */
  static readonly CreateFoodPreferencePath = '/food/preference';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createFoodPreference()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFoodPreference$Response(params: CreateFoodPreference$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createFoodPreference(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createFoodPreference$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFoodPreference(params: CreateFoodPreference$Params, context?: HttpContext): Observable<{
}> {
    return this.createFoodPreference$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
